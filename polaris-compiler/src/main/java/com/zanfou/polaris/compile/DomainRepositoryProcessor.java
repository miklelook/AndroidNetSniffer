package com.zanfou.polaris.compile;

import com.google.auto.service.AutoService;
import com.google.common.collect.ImmutableSet;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import com.zanfou.annotation.Repository;
import com.zanfou.polaris.compile.base.BaseProcessor;
import com.zanfou.polaris.compile.utils.ServicesUtils;

import java.io.IOException;
import java.util.Set;

import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;

/**
 * @author shuxin.wei email:weishuxin@maoyan.com
 * @version v1.0.0
 * @date 2019-08-20
 * <p>
 * Domain 仓库接口注解解析器
 */
@AutoService(Processor.class)
public class DomainRepositoryProcessor extends BaseProcessor {

    private TypeSpec.Builder typeSpecBuilder;
    private MethodSpec.Builder methodBuilder;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        elementUtils = processingEnv.getElementUtils();
        filer = processingEnv.getFiler();
        messager = processingEnv.getMessager();


        //创建类
        typeSpecBuilder = TypeSpec.classBuilder("DomainRepository")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .addJavadoc("Inject instances of domain's interfaces!");
        //创建方法，设置返回值
        ClassName domain = ClassName.get("com.zanfou.domain", "Domain");
        methodBuilder = MethodSpec.methodBuilder("inject")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL, Modifier.STATIC)
                .addCode("$T.getInstance()\n", domain)
                .addJavadoc("Call the method to inject!");

    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        return ImmutableSet.of(Repository.class.getName());
    }

    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        if (set.size() > 0) {
            addCode(roundEnvironment);
            try {
                String file = createFile();
                messager.printMessage(Diagnostic.Kind.NOTE, "File '" + file + "' created success!");
            } catch (Exception e) {
                e.printStackTrace();
            }
            return true;
        }
        return false;
    }

    private void addCode(RoundEnvironment roundEnvironment) {
        try {
            //获取注解的类的集合
            Set<? extends Element> domainSet = roundEnvironment.getElementsAnnotatedWith(Repository.class);
            for (Element element : domainSet) {
                //被注解类的匹配判断，是否符合要求，暂时不做校验，只处理类上的注解就可以了
                if (element.getKind() == ElementKind.CLASS) {
                    // 获取包装类类型，即使用注解的类
                    TypeElement typeElement = ServicesUtils.findEnclosingTypeElement(element);
                    String packageName = elementUtils.getPackageOf(typeElement).getQualifiedName().toString();
                    String className = typeElement.getSimpleName().toString();
                    log("Compile class that use the Repository annotation ：" + typeElement.getQualifiedName().toString());
                    methodBuilder.addCode(".registerRepository(new $T())\n", ClassName.get(packageName, className));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String createFile() throws IOException {
        String packageName = "com.zanfou.domain.repository";
        MethodSpec build = methodBuilder.addCode(";").build();
        TypeSpec typeSpec = typeSpecBuilder.addMethod(build).build();
        JavaFile javaFile = JavaFile.builder(packageName, typeSpec)
                .addFileComment("The code generated by domain-compiler!")
                .build();
        javaFile.writeTo(filer);
        return javaFile.packageName + "";
    }
}
