package com.zanfou.polaris.compile.router;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.zanfou.polaris.annotation.keep.Keep;
import com.zanfou.polaris.annotation.router.RouterParams;
import com.zanfou.polaris.annotation.router.AbsRouter;
import com.zanfou.polaris.annotation.utils.Constants;
import com.zanfou.polaris.annotation.utils.RouterUtils;

import java.util.LinkedHashMap;
import java.util.Map;

import javax.annotation.processing.Filer;
import javax.lang.model.element.Modifier;


/**
 * @author shuxin.wei email:weishuxin@maoyan.com
 * @version v1.0.0
 * @date 2019-09-09
 * <p>
 * 创建Java文件工具类
 */
public class RouterJavaFileCreator {

    /**
     * 文件名
     */
    private String fileName;
    /**
     * 方法构造器
     */
    private MethodSpec.Builder methodBuilder;
    /**
     * 类构造器
     */
    private TypeSpec.Builder classBuilder;
    /**
     * 文件构造器
     */
    private JavaFile.Builder javaFileBuilder;
    private String groupName;

    public RouterJavaFileCreator(RouterParams routeParams, String groupName) {
        this.groupName = groupName;
        this.fileName = String.format(Constants.FILE_NAME_ROUTER_FORMAT, RouterUtils.getGroupUpper(groupName));
        //路由信息在构造方法中进行初始化
        methodBuilder = MethodSpec.methodBuilder("load")
                .addModifiers(Modifier.PUBLIC)
                .returns(TypeName.VOID)
                .addAnnotation(Override.class)
                .addJavadoc("Load routes of " + fileName + " group into this!");
        //if(isLoaded()){return;}
        methodBuilder.beginControlFlow("if(isLoaded())")
                .addCode("return;")
                .endControlFlow();
    }

    public MethodSpec.Builder getMethodBuilder() {
        return methodBuilder;
    }

    /**
     * 生成Java文件
     *
     * @return 文件名
     */
    public String create(Filer filer) throws Exception {
        createClass();
        classBuilder.addMethod(methodBuilder.build());
        createJavaFile();
        javaFileBuilder.build().writeTo(filer);
        return getFileCanonicalName();
    }

    /**
     * 构造{@link #fileName}文件
     */
    private void createJavaFile() {
        javaFileBuilder = JavaFile.builder(Constants.PACKAGE_NAME, classBuilder.build())
                .addFileComment("The code generated by polaris-compiler!");
    }

    /**
     * 构造{@link #fileName}类
     */
    private void createClass() {
        classBuilder = TypeSpec.classBuilder(fileName)
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .superclass(ClassName.get(AbsRouter.class))
                .addAnnotation(Keep.class)
                .addJavadoc("Router group of " + fileName + "!");
    }

    /**
     * 创建字段 {@code private final Map<String,Object> routes = new HashMap<>();}
     */
    private FieldSpec.Builder createRoutesField() {
        ClassName hashMap = ClassName.get(LinkedHashMap.class);
        //构造返回值 Map<String,RouterParams>
        TypeName hashMapType = ParameterizedTypeName.get(ClassName.get(Map.class),
                ClassName.get(String.class),
                ClassName.get(RouterParams.class));

        FieldSpec.Builder routesFiled = FieldSpec.builder(
                hashMapType,
                Constants.FIELD_ROUTES,
                Modifier.FINAL, Modifier.PRIVATE);
        routesFiled.initializer(CodeBlock.builder().add("new $T<>(1,0.75f,true)", hashMap).build());
        return routesFiled;
    }

    /**
     * 获取完整的文件名
     */
    public String getFileCanonicalName() {
        return Constants.PACKAGE_NAME + "." + fileName;
    }

    public String getGroupName() {
        return groupName;
    }
}
